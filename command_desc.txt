1. ls -> Lists files and directories in the current directory.
2. ls -a -> Lists all files, including hidden files (those starting with a dot).
3. ls -l -> Displays a detailed list of files, including permissions, ownership, size, and modification date.
4. ls -lh -> Shows file sizes in a human-readable format (KB, MB, etc.) along with detailed information.
5. ls -R -> Lists files in all directories and subdirectories recursively.
6. ls -ltr -> Displays files sorted by modification time, with the most recent last, in long format.
7. pwd -> Prints the current working directory.
8. cd / -> Changes to the root directory.
9. cd ~ -> Changes to the home directory of the current user.
10. cd .. -> Moves one directory up (to the parent directory).
11. cd /tmp -> Changes to the `/tmp` directory.
12. cd /usr/bin -> Changes to the `/usr/bin` directory.
13. cd -P -> Changes directory without following symbolic links.
14. cd --help -> Displays help information about the `cd` command.
15. mkdir testdir -> Creates a directory named `testdir`.
16. mkdir -p testdir/testsubdir -> Creates a directory and its parent directories if they do not exist.
17. mkdir -v newdir -> Verbosely creates a directory, displaying the result.
18. rmdir testdir/testsubdir -> Removes the empty directory `testsubdir` from `testdir`.
19. rmdir -p testdir/testsubdir -> Removes `testsubdir` and the parent directory `testdir` if they are both empty.
20. touch testfile.txt -> Creates an empty file named `testfile.txt` or updates its timestamp if it exists.
21. touch testfile{1..10}.txt -> Creates multiple files named `testfile1.txt` through `testfile10.txt`.
22. touch -a testfile.txt -> Updates the access time of `testfile.txt` without modifying its contents.
23. touch -m testfile.txt -> Updates the modification time of `testfile.txt`.
24. rm testfile.txt -> Removes the file `testfile.txt`.
25. rm -f testfile2.txt -> Forcibly removes `testfile2.txt` without prompting for confirmation.
26. rm -rf testdir -> Recursively and forcibly removes the directory `testdir` and its contents.
27. rm -i testfile3.txt -> Prompts before removing `testfile3.txt`.
28. rm -v testfile4.txt -> Verbosely removes `testfile4.txt`, displaying the result.
29. cp testfile1.txt testfile2.txt -> Copies `testfile1.txt` to `testfile2.txt`.
30. cp -r testdir1 testdir2 -> Recursively copies the directory `testdir1` to `testdir2`.
31. cp -i testfile2.txt testfile3.txt -> Prompts before overwriting `testfile3.txt` with `testfile2.txt`.
32. cp --backup testfile4.txt testfile5.txt -> Creates a backup before copying `testfile4.txt` to `testfile5.txt`.
33. mv testfile1.txt testdir/ -> Moves `testfile1.txt` to `testdir/`.
34. mv -i testfile2.txt testfile3.txt -> Prompts before overwriting `testfile3.txt` with `testfile2.txt`.
35. mv -v testfile4.txt testfile5.txt -> Verbosely moves `testfile4.txt` to `testfile5.txt`.
36. mv -u testfile6.txt testfile7.txt -> Moves `testfile6.txt` to `testfile7.txt` only if `testfile7.txt` is older or missing.
37. cat testfile3.txt -> Displays the contents of `testfile3.txt`.
38. cat /etc/passwd -> Displays the contents of the `/etc/passwd` file, which contains user account information.
39. cat -n testfile3.txt -> Displays the contents of `testfile3.txt` with line numbers.
40. cat -b testfile4.txt -> Displays the contents of `testfile4.txt` with non-blank lines numbered.
41. cat -A testfile5.txt -> Displays the contents of `testfile5.txt`, showing hidden characters (tabs, line endings).
42. cat --help -> Displays help information about the `cat` command.
43. echo "Hello, World!" -> Prints the string "Hello, World!" to the terminal.
44. echo $PATH -> Displays the contents of the `PATH` environment variable.
45. echo $HOME -> Displays the path of the current user's home directory.
46. echo -n "No newline" -> Prints the string "No newline" without adding a newline character at the end.
47. echo -e "Line1\nLine2" -> Prints "Line1" followed by a newline and then "Line2".
48. echo "export PATH=\$PATH:/new/path" >> ~/.bashrc -> Appends a command to export a new path to the `~/.bashrc` file for future terminal sessions.
49. echo -e "line1\nline2\nline3" > file.txt -> Writes the lines `line1`, `line2`, and `line3` to `file.txt`, overwriting its contents.
50. head file.txt -> Displays the first 10 lines of `file.txt`.
51. head -n 5 file.txt -> Displays the first 5 lines of `file.txt`.
52. head -c 10 file.txt -> Displays the first 10 bytes of `file.txt`.
53. tail file.txt -> Displays the last 10 lines of `file.txt`.
54. tail -n 5 file.txt -> Displays the last 5 lines of `file.txt`.
55. tail -f /var/log/syslog -> Continuously displays new lines as they are added to `/var/log/syslog`.
56. tail -n +3 file.txt -> Displays `file.txt` starting from the 3rd line.
57. tail -c 20 file.txt -> Displays the last 20 bytes of `file.txt`.
58. nl file.txt -> Displays the contents of `file.txt` with line numbers.
59. more file.txt -> Allows you to view the contents of `file.txt` one screen at a time.
60. grep "pattern" file.txt -> Searches for "pattern" in `file.txt` and prints matching lines.
61. grep -i "pattern" file.txt -> Performs a case-insensitive search for "pattern" in `file.txt`.
62. grep -r "pattern" testdir/ -> Recursively searches for "pattern" in all files within `testdir/`.
63. grep -v "pattern" file.txt -> Prints lines from `file.txt` that do not contain "pattern."
64. grep --color=auto "pattern" file.txt -> Highlights the search pattern within the results for easy visibility.
65. grep -l "pattern" file.txt -> Lists the names of files that contain "pattern" instead of printing the matching lines.
66. wc file.txt -> Counts the number of lines, words, and characters in `file.txt`.
67. wc -l file.txt -> Displays the number of lines in `file.txt`.
68. wc -w file.txt -> Displays the number of words in `file.txt`.
69. wc -c file.txt -> Displays the number of bytes (characters) in `file.txt`.
70. sort file.txt -> Sorts the lines of `file.txt` alphabetically.
71. sort -r file.txt -> Sorts the lines of `file.txt` in reverse alphabetical order.
72. sort -n file.txt -> Sorts lines numerically.
73. uniq file.txt -> Removes duplicate lines from `file.txt`.
74. uniq -c file.txt -> Displays the number of occurrences of each line, along with the unique lines.
75. uniq -d file.txt -> Displays only the duplicate lines in `file.txt`.
76. chmod 644 file.txt -> Changes the permissions of `file.txt` to be readable and writable by the owner, and readable by others.
77. chmod +x script.sh -> Adds execute permissions to `script.sh`.
78. chmod -R 755 testdir -> Recursively sets the permissions of `testdir` and its contents to `755` (owner can read/write/execute, others can read/execute).
79. chmod u=rwx,g=rx,o=rx testdir/ -> Explicitly sets permissions for the owner (rwx), group (rx), and others (rx) for `testdir/`.
80. chown user:group file.txt -> Changes the owner and group of `file.txt` to `user` and `group`.
81. chown -R user:group testdir/ -> Recursively changes the owner and group of `testdir` and its contents to `user` and `group`.
82. chown --reference=otherfile.txt file.txt -> Changes the owner and group of `file.txt` to match those of `otherfile.txt`.
83. df -> Displays the amount of disk space used and available on all mounted filesystems.
84. df -h -> Displays disk usage in human-readable format (e.g., KB, MB, GB).
85. df -i -> Shows the number of available inodes (file references) on all mounted filesystems.
86. df -T -> Shows the filesystem type for each mounted filesystem.
87. df -x tmpfs -> Excludes `tmpfs` filesystems from the disk usage report.
88. du -> Displays disk usage of files and directories.
89. du -h -> Shows disk usage in a human-readable format.
90. du -sh . -> Displays the total size of the current directory.
91. du -csh -> Shows the total size of the current directory and a grand total.
92. du --max-depth=1 -> Limits the depth of directory traversal to 1 when calculating disk usage.
93. ps -> Displays information about currently running processes.
94. ps aux -> Lists all running processes with detailed information.
95. ps -ef -> Displays all processes in a full-format listing.
96. ps -u username -> Displays processes running under the specified username.
97. ps -eo pid,comm,%cpu,%mem -> Customizes the output to show only process ID, command name, CPU, and memory usage.
98. ps -p 1234 -> Displays information about the process with process ID `1234`.
99. bg -> Resumes a suspended job in the background.
100. fg -> Brings a background job to the foreground.
101. uptime -> Displays the system's uptime, load averages, and number of logged-in users.
102. whoami -> Displays the current user’s username.
103. id -> Displays user ID (UID) and group ID (GID) information for the current user.
104. id -u -> Displays only the user ID (UID) of the current user.
105. id -g -> Displays only the group ID (GID) of the current user.
106. id username -> Displays user and group information for the specified `username`.
107. date -> Displays the current date and time.
108. date "+%Y-%m-%d" -> Displays the current date in the format `YYYY-MM-DD`.
109. date "+%H:%M:%S" -> Displays the current time in the format `HH:MM:SS`.
110. cal -> Displays the current month's calendar.
111. cal -3 -> Displays the previous, current, and next month’s calendar.
112. cal 2023 -> Displays the entire calendar for the year 2023.
113. hostname -> Displays the system's hostname.
114. hostnamectl -> Provides detailed information about the system’s hostname, along with options to modify it.
115. uname -> Displays basic information about the system (kernel name).
116. uname -a -> Displays detailed system information (kernel name, version, architecture, etc.).
117. uname -r -> Displays the current kernel version.
118. uname -m -> Displays the machine hardware name (architecture, e.g., x86_64).
119. uname -s -> Displays the kernel name (e.g., Linux).
120. uname -p -> Displays the processor type (if available).
121. uname -o -> Displays the operating system name.
122. lscpu -> Displays detailed information about the CPU architecture.
123. lsblk -> Displays information about all available block devices (e.g., hard drives, USBs).
124. lsusb -> Displays information about USB devices connected to the system.
125. lspci -> Displays information about PCI devices connected to the system.
126. free -> Displays the amount of free and used memory in the system.
127. free -h -> Displays memory usage in human-readable format (e.g., KB, MB).
128. free -m -> Displays memory usage in megabytes.
129. dmesg -> Displays kernel ring buffer messages (system logs).
130. dmesg | tail -> Displays the last few kernel messages.
131. dmesg | grep "error" -> Filters kernel messages and displays only those containing the word "error."
132. fdisk -l -> Lists all available partitions and details about them.
133. parted -l -> Lists partition information in a human-readable format using the `parted` utility.
134. mount -> Displays all currently mounted filesystems.
135. mount | column -t -> Displays mounted filesystems in a tabular format.
136. umount /dev/sdb1 -> Unmounts the partition `/dev/sdb1`.
137. blkid -> Displays block device attributes like UUID, filesystem type, etc.
138. mkfs.ext4 /dev/sdb1 -> Formats the partition `/dev/sdb1` with the ext4 filesystem.
139. fsck /dev/sdb1 -> Checks the file system on `/dev/sdb1` for errors and attempts to repair them.
140. sync -> Flushes filesystem buffers (writes data to disk).
141. swapon -s -> Displays all active swap areas.
142. swapoff /swapfile -> Disables the specified swap area (`/swapfile`).
143. swapon /swapfile -> Enables the specified swap area (`/swapfile`).
144. mkswap /swapfile -> Sets up a swap area on the specified file (`/swapfile`).
145. who -> Shows who is currently logged into the system.
146. w -> Displays who is logged in and what they are doing.
147. lastlog -> Displays the most recent login of all users.
148. groups -> Displays the groups the current user belongs to.
149. users -> Lists all currently logged-in users.
150. cut -d: -f1 /etc/passwd -> Extracts the first field (username) from `/etc/passwd` using `:` as the delimiter.
151. cut -d' ' -f1 file.txt -> Extracts the first field from `file.txt` using a space as the delimiter.
152. cut -c1-5 file.txt -> Extracts characters 1 to 5 from each line of `file.txt`.
153. awk '{print $1}' file.txt -> Prints the first field from each line of `file.txt`.
154. awk '/pattern/' file.txt -> Prints lines from `file.txt` that match the specified pattern.
155. uniq file.txt -> Removes duplicate lines from a sorted file, keeping only unique lines.
156. uniq -c file.txt -> Displays the number of occurrences of each unique line.
157. uniq -d file.txt -> Displays only duplicate lines in `file.txt`.
158. chmod 644 file.txt -> Changes the permissions of `file.txt` to `644` (owner read/write, group/others read-only).
159. chmod +x script.sh -> Makes the script `script.sh` executable.
160. chmod -R 755 testdir -> Recursively changes the permissions of `testdir` and its contents to `755` (owner read/write/execute, group/others read/execute).
161. chmod u=rwx,g=rx,o=rx testdir/ -> Explicitly sets permissions for `testdir/` (owner read/write/execute, group/others read/execute).
162. chown user:group file.txt -> Changes the owner and group of `file.txt` to `user` and `group`.
163. chown -R user:group testdir/ -> Recursively changes the owner and group of `testdir/` and its contents.
164. chown --reference=otherfile.txt file.txt -> Changes the ownership of `file.txt` to match that of `otherfile.txt`.
165. df -> Displays disk space usage for all mounted filesystems.
166. df -h -> Displays disk space usage in a human-readable format (e.g., GB).
167. df -i -> Displays inode usage for filesystems (inodes are used to store information about files).
168. df -T -> Displays the filesystem type along with disk space usage.
169. df -x tmpfs -> Excludes filesystems of type `tmpfs` from the disk space usage output.
170. du -> Displays disk usage for files and directories.
171. du -h -> Displays disk usage in a human-readable format.
172. du -sh . -> Displays the total disk usage of the current directory.
173. du -csh -> Displays the total disk usage of a directory and its subdirectories and includes a grand total.
174. du --max-depth=1 -> Displays disk usage, limiting the depth of directory traversal to 1 level.
175. ps -> Displays information about active processes.
176. ps aux -> Displays detailed information about all running processes on the system.
177. ps -ef -> Displays a full-format listing of processes, including the parent process IDs.
178. ps -u username -> Displays processes for the specified `username`.
179. ps -eo pid,comm,%cpu,%mem -> Displays the process ID, command, CPU, and memory usage for each process
180. tree -> Displays a tree view of directories and files.
181. ifconfig eth0 -> Displays the configuration and status of the `eth0` network interface.
182. ifconfig wlan0 down -> Disables the `wlan0` network interface.
183. ifconfig wlan0 up -> Enables the `wlan0` network interface.
184. iwconfig -> Displays or configures wireless network interfaces and their settings.
185. ip a -> Shows all network interfaces and their IP addresses.
186. ip link show -> Displays the status and details of all network interfaces.
187. ip route -> Shows the routing table, displaying how packets are routed.
188. ip link set eth0 up -> Enables the `eth0` network interface.
189. ip link set eth0 down -> Disables the `eth0` network interface.
190. tar -cvf archive.tar directory -> Creates a tarball archive of a directory.
191. tar -xvf archive.tar -> Extracts files from a tarball archive.
192. stat file.txt -> Displays detailed information about `file.txt`, including its size, permissions, and timestamps.
193. lsof -> Lists open files and the processes that opened them.
194. ip rule -> Shows the routing policy rules.
195. df -T -> Displays the disk space usage and the filesystem type for all mounted filesystems.
196. file file`txt -> Determines the file type of file.txt.
197. ss -s -> Displays summary statistics for sockets.
198. arp -a -> Displays the ARP table, showing the IP addresses and corresponding MAC addresses.
199. pstree -> Displays a tree of processes, showing the parent-child relationship.
200. time ls -> Measures how long it takes for `ls` to execute.